name: 'Setup Apama'
description: 'Install Apama Community Edition and add it to your GitHub Actions environment'
inputs:
  apama-version:
    description: 'The 4 digit version to install from https://downloads.apamacommunity.com/apama, e.g. 10.5.3.2'
    required: true

runs:
  using: "composite"
  steps: 
      - name: Install Apama Community Edition
        shell: bash
        run: |
          APAMA_CACHE_TAR=~/cached-apama-installation.tar

          if [[ ${{runner.os}} = Windows ]]; then
            _SAG_INSTALL_PATH=c:\\SoftwareAG
            DOWNLOAD_PLATFORM=amd64_win
          else
            _SAG_INSTALL_PATH=/opt/softwareag
            DOWNLOAD_PLATFORM=amd64_linux
          fi
          
          if [[ -f $APAMA_CACHE_TAR ]]; then
            echo Unpacking Apama installation from cache at $APAMA_CACHE_TAR
            
            echo 1 $_SAG_INSTALL_PATH
            mkdir $_SAG_INSTALL_PATH
            echo 2
            cd $_SAG_INSTALL_PATH
            echo 3
            which tar
            tar -xf $APAMA_CACHE_TAR
            echo 4
            ls

            # Check it unpacked correctly
            ls $_SAG_INSTALL_PATH/Apama > /dev/null
          else
            echo No installation found in cache $APAMA_CACHE_TAR
            # Cache miss - need to install it
            mkdir ../apama-installer
            cd ../apama-installer
            DOWNLOAD_URL=https://downloads.apamacommunity.com/apama/${{ inputs.apama-version }}/apama_${{ inputs.apama-version }}_$DOWNLOAD_PLATFORM.zip
            echo Downloading from $DOWNLOAD_URL
            curl --retry 2 --output apama-installer.zip $DOWNLOAD_URL

            unzip -q apama-installer.zip
            mv apama_*/* ./
            
            cat > apama-installer-script.txt << EOF
          LicenseAgree=Accept
          InstallProducts=e2ei/11/.latest/Apama/PAMServer
          PAM.Work.Directory.ID=__VERSION1__,$_SAG_INSTALL_PATH/apama-work
          InstallDir=$_SAG_INSTALL_PATH
          sagInstallerLogFile=softwareag-installer.log
          imageFile=data/SAGImage.zip
          EOF
            # Need to escape backslashes as it's effectively a properties file
            sed -i 's/\\/\\\\/g' apama-installer-script.txt
            
            echo Running installer with script:
            cat apama-installer-script.txt
            
            ./install -readScript apama-installer-script.txt -console -scriptErrorInteract no
            
            # Double-check that it was installed
            ls $_SAG_INSTALL_PATH/Apama/bin > /dev/null
            
            # Archive a pristine copy of the installation for the cache (before running any tests); 
            # no need to compress as the cache already does that
            cd $_SAG_INSTALL_PATH
            tar -cf $APAMA_CACHE_TAR *
          fi

          cd ~

          # Until Apama 10.7 we need to explicitly enable color from GitHub Actions 
          # (and disable colorama on windows which would replace the escape codes)
          echo PYSYS_COLOR=true >> $GITHUB_ENV
          echo PYSYS_DISABLE_COLORAMA=true >> $GITHUB_ENV
          
          # Once installed, copy the entire apama environment into the GH Actions env so it can be used in any type of 
          # shell (bash/cmd/PS etc). We also set an extra env var APAMA_PYSYS so user can run pysys from any shell. 
          if [[ ${{runner.os}} = Windows ]]; then
            echo "APAMA_PYSYS=pysys.cmd" >> $GITHUB_ENV

            echo "APAMA_HOME=`cygpath --windows $_SAG_INSTALL_PATH/Apama`" >> $GITHUB_ENV
            # For Windows we need to do it all in a separate (cmd) step otherwise extra vars from Git Bash will leak in
          else
            echo "APAMA_PYSYS=pysys" >> $GITHUB_ENV

            . $_SAG_INSTALL_PATH/Apama/bin/apama_env
            env | sort >> apama.env

            # This will replace the environment to point at Apama rather than GH Actions pre-installed tools, which ensures
            # the right version of Ant/Java etc is used
            cat apama.env >> $GITHUB_ENV
          fi

      - name: Setup Apama environment on Windows
        shell: python
        run: |
          # Ideally we'd just run this in a cmd shell, but can't since it wouldn't work on Linux and GH composite 
          # actions don't yet support "if"
          # Can't do this as part of the bash shell above, as Windows Git Bash pollutes the environment
          import os
          if os.name=='nt':
            print('Adding apama_env.bat environment to GITHUB_ENV; parent process PATH=%s' % os.environ['PATH'])
            cmd = 'cmd /c "%APAMA_HOME%\bin\apama_env.bat && set >> %GITHUB_ENV%"'
            print('Executing: %s' % cmd)
            os.system(cmd)
          